{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reflex Clerk Component Library Documentation","text":"<p>A Reflex custom component library for Clerk\u00a0\u29c9, a User Management Platform.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Install with pip install:</p> <pre><code>pip install reflex-clerk\n</code></pre> <p>Import the custom component:</p> <pre><code>import reflex_clerk as clerk\n</code></pre> <p>Install signup and login pages:</p> <pre><code>import reflex as rx\nimport reflex_clerk as clerk\n\napp = rx.App()\nclerk.install_pages(\n    app,\n    publishable_key=\"pk_my_publishable_key\",\n    signin_route=\"/signin\",\n    signup_route=\"/signup\"\n)\n</code></pre> <p>Wrap any pages that use clerk auth components in a <code>clerk_provider</code>.</p> <pre><code>import reflex_clerk as clerk\nimport reflex as rx\n\n\n@rx.page(\"/\")\ndef homepage():\n    clerk.clerk_provider(\n        ...,  # the rest of my homepage\n\n        publishable_key=\"pk_my_publishable_key\",\n        secret_key=\"sk_my_secret_key\"\n    )\n</code></pre> <p>... and now use one of over a dozen components provided by the Clerk SDK, and access the current user with ClerkState.</p> <pre><code>import reflex_clerk as clerk\nimport reflex as rx\n\n...\nclerk.clerk_provider(\n    ...,\n\n    clerk.signed_in(  # (1) \n        rx.cond(\n            clerk.ClerkState.user.has_image,  # (2)\n            rx.chakra.avatar(\n                src=clerk.ClerkState.user.image_url,  # (3)\n                name=clerk.ClerkState.user.first_name,\n                size=\"xl\",\n            ),\n        )\n    ),\n\n    ...\n)\n</code></pre> <ol> <li>The clerk.signed_in() control component hides child components unless the user is actively    logged in. See also clerk.signed_out() and clerk.protect.</li> <li>ClerkState provides a reflex State that holds the current authentication    state, as well as the reflex user itself.</li> <li>ClerkState.user contains the Clerk user object for the currently logged in user -- including    email and phone number info, name information, and an    avatar image.</li> </ol>"},{"location":"#components","title":"Components","text":"<ul> <li><code>&lt;ClerkProvider /&gt;</code>: Provides session management context to child components</li> <li><code>&lt;SignInButton /&gt;</code>: Wrap a button or link with this component to make it a sign-in link!</li> <li><code>&lt;SignOutButton /&gt;</code>: Logs the current user out.</li> <li><code>&lt;SignUpButton /&gt;</code>: Wrap a button or link to take the user to the signup page. </li> <li><code>&lt;UserButton /&gt;</code>: A navbar element for the current logged in user, with user switching capabilities.</li> <li><code>&lt;SignUp /&gt;</code>: A full user registration card</li> <li><code>&lt;SignIn /&gt;</code>: A login card</li> <li><code>&lt;UserProfile /&gt;</code>: A full page component for user profile management</li> <li><code>&lt;SignedIn /&gt;</code>: Hides child components unless the user is signed in</li> <li><code>&lt;SignedOut /&gt;</code>: Hides child components unless the user is signed out</li> <li><code>&lt;RedirectToUserProfile /&gt;</code>: Redirects to the user profile page, if rendered </li> <li><code>&lt;RedirectToSignIn /&gt;</code>: Redirects to the user sign in page, if rendered </li> <li><code>&lt;RedirectToSignUp /&gt;</code>: Redirects to the user registration page, if rendered</li> <li><code>&lt;RedirectToOrganizationProfile /&gt;</code>: Redirects to the organization profile page, if rendered</li> <li><code>&lt;RedirectToCreateOrganization /&gt;</code>: Redirects to the organization creation page, if rendered</li> <li><code>&lt;MultisessionAppSupport /&gt;</code>: Ensures child components are rerendered after a session switches users in a multi-user session context</li> <li><code>&lt;ClerkLoading /&gt;</code>: Renders child components only if Clerk has not yet initialized</li> <li><code>&lt;ClerkLoaded /&gt;</code>: Renders child components only if Clerk has fully initialized</li> <li><code>&lt;Protect /&gt;</code>: Renders child components only if the user has the specified role or permissions</li> </ul>"},{"location":"#reflex-state-management","title":"Reflex State Management","text":"<ul> <li><code>ClerkState.is_logged_in</code>: true if we can verify the current reflex session contains an authenticated Clerk user</li> <li><code>ClerkState.user</code>: a copy of the Clerk user object retrieved at the time of authentication</li> </ul>"},{"location":"#reflex-auth-pages","title":"Reflex Auth Pages","text":"<ul> <li><code>clerk.install_pages</code>: Installs /signup and /signin pages preconfigured for Clerk</li> <li><code>clerk.install_signin_page</code>: Installs /signin page preconfigured for Clerk</li> <li><code>clerk.install_signup_page</code>: Installs /signup page preconfigured for Clerk</li> </ul>"},{"location":"clerk_provider/","title":"Clerk Provider Component","text":"<p>In order to provide clerk context to the other components in the reflex_clerk library, and to power the state logic in ClerkState, pages that contain any clerk components need to be wrapped in a ClerkProvider component.</p> <pre><code>import reflex_clerk as clerk\n\nclerk.clerk_provider(\n\n    ...,  # this is where you put the rest of your page\n\n    publishable_key=\"pk_my_publishable_key\",\n    secret_key=\"sk_my_secret_key\"\n)\n</code></pre> <p>The <code>publishable_key</code> and <code>secret_key</code> parameters are used to authenticate with Clerk, and can be set by either passing both to the clerk_provider component or by setting the <code>CLERK_PUBLISHABLE_KEY</code> and <code>CLERK_SECRET_KEY</code> environment variables.</p> <p>Note that while it appears to be added to the underlying component, the <code>secret_key</code> should never be shared publicly, and is stripped before being rendered -- it is used only to populate the secret key used by ClerkState to verify session tokens.</p> <p>Both of these keys can be found in your Clerk Dashboard on the Clerk API Keys\u00a0\u29c9 page.</p>"},{"location":"clerk_provider/#reflex_clerk.clerk_provider","title":"reflex_clerk.clerk_provider","text":"<pre><code>clerk_provider(\n    *children,\n    publishable_key: Optional[str] = None,\n    secret_key: Optional[str] = None,\n    clerk_j_s_url: Optional[str] = None,\n    clerk_j_s_variant: Optional[str] = None,\n    clerk_j_s_version: Optional[str] = None,\n    support_email: Optional[str] = None,\n    appearance: Optional[dict] = None,\n    localization: Optional[dict] = None,\n    allowed_redirect_origins: Optional[List[Optional[str]]] = None,\n    sign_in_force_redirect_url: Optional[str] = None,\n    sign_up_force_redirect_url: Optional[str] = None,\n    sign_in_fallback_redirect_url: Optional[str] = None,\n    sign_up_fallback_redirect_url: Optional[str] = None,\n    is_satellite: Optional[bool] = None,\n    domain: Optional[str] = None,\n    sign_in_url: Optional[str] = None,\n    telemetry: Optional[bool] = None\n) -&gt; Component\n</code></pre> <p>A component which wraps your application and provides a context for Clerk to function.</p> <p>This component must be rendered at the root of your application, before any other reflex_clerk components.</p> Example <pre><code>import reflex as rx\nimport reflex_clerk as clerk\n\n@rx.page(\"/\")\ndef index(request):\n    return clerk.clerk_provider(\n\n        # ... Child components...\n\n        publishable_key=\"pk_test_123\",\n        secret_key=\"sk_test_123\",\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <code>publishable_key</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The publishable key used to initialize Clerk. This can be passed either as a prop or set as the <code>CLERK_PUBLISHABLE_KEY</code> environment variable.</p> </li> <li> <code>secret_key</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The secret key used to call out to the clerk API from the backend. This can be passed either as a prop or set as the <code>CLERK_SECRET_KEY</code> environment variable.</p> </li> </ul> <p>Other Parameters:</p> <ul> <li> <code>clerk_j_s_url</code>               (<code>Optional[str]</code>)           \u2013            <p>The URL that @clerk/clerk-react should hot-load @clerk/clerk-js from.</p> </li> <li> <code>clerk_j_s_variant</code>               (<code>Optional[str]</code>)           \u2013            <p>The variant of @clerk/clerk-js to load. Defaults to the latest version.</p> </li> <li> <code>clerk_j_s_version</code>               (<code>Optional[str]</code>)           \u2013            <p>The version of @clerk/clerk-js to load. Defaults to the latest version.</p> </li> <li> <code>support_email</code>               (<code>Optional[str]</code>)           \u2013            <p>Optional support email for display in authentication screens. Will only affect Clerk Components and not Account Portal pages.</p> </li> <li> <code>appearance</code>               (<code>Optional[dict]</code>)           \u2013            <p>Optional object to style your components. Will only affect Clerk Components and not Account Portal pages.</p> </li> <li> <code>localization</code>               (<code>Optional[dict]</code>)           \u2013            <p>Optional object to localize your components. Will only affect Clerk Components and not Account Portal pages.</p> </li> <li> <code>allowed_redirect_origins</code>               (<code>Optional[List[Optional[str]]]</code>)           \u2013            <p>Optional array of domains used to validate against the query param of an auth redirect. If no match is made, the redirect is considered unsafe and the default redirect will be used with a warning passed to the console.</p> </li> <li> <code>sign_in_force_redirect_url</code>               (<code>Optional[str]</code>)           \u2013            <p>If provided, this URL will always be redirected to after the user signs in. It's recommended to use the environment variable instead.</p> </li> <li> <code>sign_up_force_redirect_url</code>               (<code>Optional[str]</code>)           \u2013            <p>If provided, this URL will always be redirected to after the user signs up. It's recommended to use the environment variable instead.</p> </li> <li> <code>sign_in_fallback_redirect_url</code>               (<code>Optional[str]</code>)           \u2013            <p>The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.</p> </li> <li> <code>sign_up_fallback_redirect_url</code>               (<code>Optional[str]</code>)           \u2013            <p>The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.</p> </li> <li> <code>is_satellite</code>               (<code>Optional[bool]</code>)           \u2013            <p>This option defines that the application is a satellite application.</p> </li> <li> <code>domain</code>               (<code>Optional[str]</code>)           \u2013            <p>This option sets the domain of the satellite application. If your application is a satellite application, this option is required.</p> </li> <li> <code>sign_in_url</code>               (<code>Optional[str]</code>)           \u2013            <p>This URL will be used for any redirects that might happen and needs to point to your primary application. This option is optional for production instances and required for development instances. It's recommended to use the environment variable instead.</p> </li> <li> <code>telemetry</code>               (<code>Optional[bool]</code>)           \u2013            <p>Controls whether or not Clerk will collect telemetry data.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ClerkProvider</code> (              <code>Component</code> )          \u2013            <p>A new instance of ClerkProvider.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/lib/clerk_provider.py</code> <pre><code>def clerk_provider(\n        *children,\n        publishable_key: typing.Optional[str] = None,\n        secret_key: typing.Optional[str] = None,\n        clerk_j_s_url: typing.Optional[str] = None,\n        clerk_j_s_variant: typing.Optional[str] = None,\n        clerk_j_s_version: typing.Optional[str] = None,\n        support_email: typing.Optional[str] = None,\n        appearance: typing.Optional[dict] = None,\n        localization: typing.Optional[dict] = None,\n        allowed_redirect_origins: typing.Optional[typing.List[typing.Optional[str]]] = None,\n        sign_in_force_redirect_url: typing.Optional[str] = None,\n        sign_up_force_redirect_url: typing.Optional[str] = None,\n        sign_in_fallback_redirect_url: typing.Optional[str] = None,\n        sign_up_fallback_redirect_url: typing.Optional[str] = None,\n        is_satellite: typing.Optional[bool] = None,\n        domain: typing.Optional[str] = None,\n        sign_in_url: typing.Optional[str] = None,\n        telemetry: typing.Optional[bool] = None,\n) -&gt; Component:\n    \"\"\"\n    A component which wraps your application and provides a context for Clerk to function.\n\n    This component must be rendered at the root of your application, before any other\n    reflex_clerk components.\n\n    Example:\n        ```python\n        import reflex as rx\n        import reflex_clerk as clerk\n\n        @rx.page(\"/\")\n        def index(request):\n            return clerk.clerk_provider(\n\n                # ... Child components...\n\n                publishable_key=\"pk_test_123\",\n                secret_key=\"sk_test_123\",\n            )\n        ```\n\n    Args:\n        publishable_key: The publishable key used to initialize Clerk. This can be passed either as a prop or set as the `CLERK_PUBLISHABLE_KEY` environment variable.\n        secret_key: The secret key used to call out to the clerk API from the backend. This can be passed either as a prop or set as the `CLERK_SECRET_KEY` environment variable.\n\n    Other Args:\n        clerk_j_s_url: The URL that @clerk/clerk-react should hot-load @clerk/clerk-js from.\n        clerk_j_s_variant: The variant of @clerk/clerk-js to load. Defaults to the latest version.\n        clerk_j_s_version: The version of @clerk/clerk-js to load. Defaults to the latest version.\n        support_email: Optional support email for display in authentication screens. Will only affect Clerk Components and not Account Portal pages.\n        appearance: Optional object to style your components. Will only affect Clerk Components and not Account Portal pages.\n        localization: Optional object to localize your components. Will only affect Clerk Components and not Account Portal pages.\n        allowed_redirect_origins: Optional array of domains used to validate against the query param of an auth redirect. If no match is made, the redirect is considered unsafe and the default redirect will be used with a warning passed to the console.\n        sign_in_force_redirect_url: If provided, this URL will always be redirected to after the user signs in. It's recommended to use the environment variable instead.\n        sign_up_force_redirect_url: If provided, this URL will always be redirected to after the user signs up. It's recommended to use the environment variable instead.\n        sign_in_fallback_redirect_url: The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.\n        sign_up_fallback_redirect_url: The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.\n        is_satellite: This option defines that the application is a satellite application.\n        domain: This option sets the domain of the satellite application. If your application is a satellite application, this option is required.\n        sign_in_url: This URL will be used for any redirects that might happen and needs to point to your primary application. This option is optional for production instances and required for development instances. It's recommended to use the environment variable instead.\n        telemetry: Controls whether or not Clerk will collect telemetry data.\n\n    Returns:\n        ClerkProvider: A new instance of ClerkProvider.\n    \"\"\"\n    return ClerkProvider.create(\n        *children,\n        publishable_key=publishable_key,\n        secret_key=secret_key,\n        clerk_j_s_url=clerk_j_s_url,\n        clerk_j_s_variant=clerk_j_s_variant,\n        clerk_j_s_version=clerk_j_s_version,\n        support_email=support_email,\n        appearance=appearance,\n        localization=localization,\n        allowed_redirect_origins=allowed_redirect_origins,\n        sign_in_force_redirect_url=sign_in_force_redirect_url,\n        sign_up_force_redirect_url=sign_up_force_redirect_url,\n        sign_in_fallback_redirect_url=sign_in_fallback_redirect_url,\n        sign_up_fallback_redirect_url=sign_up_fallback_redirect_url,\n        is_satellite=is_satellite,\n        domain=domain,\n        sign_in_url=sign_in_url,\n        telemetry=telemetry)\n</code></pre>"},{"location":"clerk_state/","title":"Clerk State","text":""},{"location":"clerk_state/#reflex_clerk.ClerkState","title":"reflex_clerk.ClerkState","text":"<p>               Bases: <code>State</code></p> <p>A Reflex state object representing the current authenticated session and user; use this state to render details about the currently logged in user.</p> Example <pre><code>import reflex_clerk as clerk\n\nclerk.signed_in(\n    rx.cond(\n        ClerkState.user.has_image,\n        rx.chakra.avatar(\n            src=ClerkState.user.image_url,\n            name=ClerkState.user.first_name,\n            size=\"xl\",\n        ),\n    )\n)\n</code></pre> Example <pre><code>import reflex_clerk as clerk\n\nclerk.protect(\n    rx.fragment(\"You are logged in as \", clerk.ClerkState.user.first_name),\n    fallback=rx.text(\"You need to sign in first!\"),\n)\n</code></pre> Source code in <code>custom_components/reflex_clerk/lib/clerk_provider.py</code> <pre><code>class ClerkState(rx.State):\n    \"\"\"\n    A Reflex state object representing the current authenticated session and user;\n    use this state to render details about the currently logged in user.\n\n    Example:\n        ```python\n        import reflex_clerk as clerk\n\n        clerk.signed_in(\n            rx.cond(\n                ClerkState.user.has_image,\n                rx.chakra.avatar(\n                    src=ClerkState.user.image_url,\n                    name=ClerkState.user.first_name,\n                    size=\"xl\",\n                ),\n            )\n        )\n        ```\n\n    Example:\n        ```python\n        import reflex_clerk as clerk\n\n        clerk.protect(\n            rx.fragment(\"You are logged in as \", clerk.ClerkState.user.first_name),\n            fallback=rx.text(\"You need to sign in first!\"),\n        )\n        ```\n\n\n    \"\"\"\n\n    is_signed_in: bool = False\n    \"\"\"\n    True if the user is signed in, False otherwise.\n\n    This field is only set to true after server-side validation of the session is complete.\n    Check if this is true before returning sensitive user state from other states.\n\n    Example:\n        ```python\n        rx.cond(\n            clerk.ClerkState.is_signed_in,\n            rx.text(\"You are signed in\"),\n            rx.text(\"You are signed out\")\n        )\n        ```\n\n        _Consider using [reflex_clerk.signed_in][] and [reflex_clerk.signed_out][] instead\n        to render different information based on if the user is signed in or not on the client\n        side instead of on the server._\n\n    \"\"\"\n\n    auth_error: typing.Optional[Exception] = None\n    \"\"\"\n    Non-None if the user authentication process failed.\n\n    This should be quite rare, and likely indicates an expired session.\n    \"\"\"\n\n    claims: typing.Optional[JWTClaims] = None\n    \"\"\"\n    This field contains the decoded JWT Session claims once server-side validation\n    of the session is complete.  You can use\n    [Clerk JWT Templates](https://clerk.com/docs/backend-requests/making/jwt-templates)\n    to return additional information about the session to this field.\n    \"\"\"\n\n    user_id: typing.Optional[str] = None\n    \"\"\"\n    A variable representing the Clerk User ID of the currently logged in user.\n\n    This field is only set to true after server-side validation of the session is complete.\n    \"\"\"\n\n    user: typing.Optional[clerk_response_models.User] = None\n    \"\"\"\n    A variable representing the Clerk User of the currently logged in user.\n\n    This field is only set to true after server-side validation of the session is complete,\n    and can be disabled for performance reasons using [set_fetch_user_on_auth][reflex_clerk.ClerkState.set_fetch_user_on_auth].\n    \"\"\"\n\n    # static class variables\n    _jwt_public_keys: List[typing.Dict[str, str]] = []\n    _secret_key: str = None\n    _clerk_api_client: ClerkAPIClient = None\n    _fetch_user: bool = True\n\n    # noinspection PyPropertyDefinition\n    @classmethod\n    @property\n    def secret_key(cls) -&gt; str:\n        if cls._secret_key is None:\n            if 'CLERK_SECRET_KEY' in os.environ:\n                cls._secret_key = os.environ['CLERK_SECRET_KEY']\n\n        return cls._secret_key\n\n    # noinspection PyPropertyDefinition\n    @classmethod\n    @property\n    def jwt_public_keys(cls) -&gt; typing.List[typing.Dict[str, str]]:\n        if not cls._jwt_public_keys:\n            if 'CLERK_JWT_PUBLIC_KEYS' in os.environ:\n                cls._jwt_public_keys = list(map(json.loads, os.environ['CLERK_JWT_PUBLIC_KEYS'].split(',')))\n            if cls.secret_key and cls.clerk_api_client:\n                cls._jwt_public_keys = cls._clerk_api_client.get_jwks().dict()['keys']\n        return cls._jwt_public_keys\n\n    # noinspection PyPropertyDefinition\n    @classmethod\n    @property\n    def clerk_api_client(cls) -&gt; clerk_client.ClerkAPIClient:\n        if cls._clerk_api_client is None:\n            cls._clerk_api_client = clerk_client.get_client(cls.secret_key)\n        return cls._clerk_api_client\n\n    @classmethod\n    def set_fetch_user_on_auth(cls, fetch_user: bool):\n        \"\"\"\n        This method is used to control whether the authenticating user should be\n        fetched from Clerk upon successful authentication.\n\n        Defaults to true; set this to False if the Clark User object is not being\n        used, as it saves a backend call to Clark every time a user authenticates.\n\n        Note:\n            Setting this to True only fetches ClerkState.user once at the time of\n            user authentication. This implementation doesn't automatically detect\n             and update any changes in the underlying user object data, such as\n            email address modifications. Therefore, to ensure you have the latest\n            user data while logged in, especially if changes have been made, you\n            should use the ClerkState.fetch_user reflex event to manually refresh\n            the user data.\n\n        Args:\n            fetch_user (bool): Indicates whether the user should be fetched.\n        \"\"\"\n        cls._fetch_user = fetch_user\n\n    def set_clerk_session(self, token: str) -&gt; None:\n        \"\"\"\n        Validates a Clerk session token and optionally fetches the associated\n        user object.  This is used internally by reflex_clerk to manage the\n        current auth state of users: it is called by the frontend whenever\n        the Clerk isSignedIn auth state changes from false to true.\n\n        Args:\n            token: A JWT token used to authenticate and authorize the user.\n        \"\"\"\n        if not ClerkState._jwt_public_keys:\n            print(f\"No Clerk JWT public keys found. Skipping Clerk session set.\")\n            return\n\n        try:\n            decoded: JWTClaims = jwt.decode(token, {\"keys\": ClerkState.jwt_public_keys})\n            self.is_signed_in = True\n            self.claims = decoded\n            self.user_id = decoded.get('sub')\n\n            if self._fetch_user:\n                self.fetch_user()\n\n        except JoseError as e:\n            self.auth_error = e\n            logging.warning(f\"Auth error: {e}\")\n\n    def clear_clerk_session(self):\n        \"\"\"\n        Clears the clerk session by setting the sign-in status to False,\n        resetting the claims to None, and clearing any authentication errors.\n\n        This is used internally by reflex_clerk to manage the\n        current auth state of users: it is called by the frontend whenever\n        the Clerk isSignedIn auth state changes from true to false.\n\n\n        :param self: The current instance of the class.\n        \"\"\"\n        self.is_signed_in = False\n        self.claims = None\n        self.auth_error = None\n\n    def clear_clerk_auth_error(self):\n        \"\"\"\n        Clears the clerk authentication error.\n\n        This method sets the `auth_error` attribute of the current instance to `None`.\n        \"\"\"\n        self.auth_error = None\n\n    def fetch_user(self):\n        \"\"\"\n        Fetches ClerkState.user from the clerk backend API, using\n        ClerkState.user_id.  Use this Reflex event if you want to force\n        update the clerk user data after a user logs in (such as after modifying\n        their account profile).\n        \"\"\"\n        if self.user_id:\n            user = self.clerk_api_client.get_user(self.user_id)\n            self.set_user(user)\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.ClerkState.is_signed_in","title":"is_signed_in  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_signed_in: bool = False\n</code></pre> <p>True if the user is signed in, False otherwise.</p> <p>This field is only set to true after server-side validation of the session is complete. Check if this is true before returning sensitive user state from other states.</p> Example <pre><code>rx.cond(\n    clerk.ClerkState.is_signed_in,\n    rx.text(\"You are signed in\"),\n    rx.text(\"You are signed out\")\n)\n</code></pre> <p>Consider using reflex_clerk.signed_in and reflex_clerk.signed_out instead to render different information based on if the user is signed in or not on the client side instead of on the server.</p>"},{"location":"clerk_state/#reflex_clerk.ClerkState.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user: Optional[User] = None\n</code></pre> <p>A variable representing the Clerk User of the currently logged in user.</p> <p>This field is only set to true after server-side validation of the session is complete, and can be disabled for performance reasons using set_fetch_user_on_auth.</p>"},{"location":"clerk_state/#reflex_clerk.ClerkState.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id: Optional[str] = None\n</code></pre> <p>A variable representing the Clerk User ID of the currently logged in user.</p> <p>This field is only set to true after server-side validation of the session is complete.</p>"},{"location":"clerk_state/#reflex_clerk.ClerkState.fetch_user","title":"fetch_user","text":"<pre><code>fetch_user()\n</code></pre> <p>Fetches ClerkState.user from the clerk backend API, using ClerkState.user_id.  Use this Reflex event if you want to force update the clerk user data after a user logs in (such as after modifying their account profile).</p> Source code in <code>custom_components/reflex_clerk/lib/clerk_provider.py</code> <pre><code>def fetch_user(self):\n    \"\"\"\n    Fetches ClerkState.user from the clerk backend API, using\n    ClerkState.user_id.  Use this Reflex event if you want to force\n    update the clerk user data after a user logs in (such as after modifying\n    their account profile).\n    \"\"\"\n    if self.user_id:\n        user = self.clerk_api_client.get_user(self.user_id)\n        self.set_user(user)\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.ClerkState.set_fetch_user_on_auth","title":"set_fetch_user_on_auth  <code>classmethod</code>","text":"<pre><code>set_fetch_user_on_auth(fetch_user: bool)\n</code></pre> <p>This method is used to control whether the authenticating user should be fetched from Clerk upon successful authentication.</p> <p>Defaults to true; set this to False if the Clark User object is not being used, as it saves a backend call to Clark every time a user authenticates.</p> Note <p>Setting this to True only fetches ClerkState.user once at the time of user authentication. This implementation doesn't automatically detect  and update any changes in the underlying user object data, such as email address modifications. Therefore, to ensure you have the latest user data while logged in, especially if changes have been made, you should use the ClerkState.fetch_user reflex event to manually refresh the user data.</p> <p>Parameters:</p> <ul> <li> <code>fetch_user</code>               (<code>bool</code>)           \u2013            <p>Indicates whether the user should be fetched.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/lib/clerk_provider.py</code> <pre><code>@classmethod\ndef set_fetch_user_on_auth(cls, fetch_user: bool):\n    \"\"\"\n    This method is used to control whether the authenticating user should be\n    fetched from Clerk upon successful authentication.\n\n    Defaults to true; set this to False if the Clark User object is not being\n    used, as it saves a backend call to Clark every time a user authenticates.\n\n    Note:\n        Setting this to True only fetches ClerkState.user once at the time of\n        user authentication. This implementation doesn't automatically detect\n         and update any changes in the underlying user object data, such as\n        email address modifications. Therefore, to ensure you have the latest\n        user data while logged in, especially if changes have been made, you\n        should use the ClerkState.fetch_user reflex event to manually refresh\n        the user data.\n\n    Args:\n        fetch_user (bool): Indicates whether the user should be fetched.\n    \"\"\"\n    cls._fetch_user = fetch_user\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.User","title":"reflex_clerk.User","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a user object with various attributes related to their profile, authentication, and metadata.</p> <p>See the Clerk documentation\u00a0\u29c9 for more details.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>A unique identifier for the user.</p> </li> <li> <code>object</code>               (<code>str</code>)           \u2013            <p>The type of object, typically 'user'.</p> </li> <li> <code>external_id</code>               (<code>Optional[str]</code>)           \u2013            <p>An optional external identifier for the user.</p> </li> <li> <code>primary_email_address_id</code>               (<code>Optional[str]</code>)           \u2013            <p>The unique identifier for the EmailAddress that the user has set as primary.</p> </li> <li> <code>primary_phone_number_id</code>               (<code>Optional[str]</code>)           \u2013            <p>The unique identifier for the PhoneNumber that the user has set as primary.</p> </li> <li> <code>primary_web3_wallet_id</code>               (<code>Optional[str]</code>)           \u2013            <p>The unique identifier for the Web3Wallet that the user signed up with.</p> </li> <li> <code>username</code>               (<code>Optional[str]</code>)           \u2013            <p>The user's username.</p> </li> <li> <code>first_name</code>               (<code>Optional[str]</code>)           \u2013            <p>The user's first name.</p> </li> <li> <code>last_name</code>               (<code>Optional[str]</code>)           \u2013            <p>The user's last name.</p> </li> <li> <code>profile_image_url</code>               (<code>Optional[str]</code>)           \u2013            <p>Holds the default avatar or user's uploaded profile image. Compatible with Clerk's Image Optimization.</p> </li> <li> <code>image_url</code>               (<code>Optional[str]</code>)           \u2013            <p>The URL of the user's profile image.</p> </li> <li> <code>passkeys</code>               (<code>Optional[List[PasskeyResource]]</code>)           \u2013            <p>An array of passkeys associated with the user's account.</p> </li> <li> <code>has_image</code>               (<code>bool</code>)           \u2013            <p>A boolean to check if the user has uploaded an image or one was copied from OAuth. Returns false if Clerk is displaying an avatar for the user.</p> </li> <li> <code>public_metadata</code>               (<code>Dict[str, Any]</code>)           \u2013            <p>Metadata that can be read from the Frontend API and Backend API and can be set only from the Backend API.</p> </li> <li> <code>private_metadata</code>               (<code>Optional[Dict[str, Any]]</code>)           \u2013            <p>Metadata that can be read and set only from the Backend API.</p> </li> <li> <code>unsafe_metadata</code>               (<code>Dict[str, Any]</code>)           \u2013            <p>Metadata that can be read and set from the Frontend API. Often used for custom fields attached to the User object.</p> </li> <li> <code>email_addresses</code>               (<code>List[EmailAddress]</code>)           \u2013            <p>An array of all the EmailAddress objects associated with the user, including the primary.</p> </li> <li> <code>phone_numbers</code>               (<code>List[PhoneNumber]</code>)           \u2013            <p>An array of all the PhoneNumber objects associated with the user, including the primary.</p> </li> <li> <code>web3_wallets</code>               (<code>List[Web3Wallet]</code>)           \u2013            <p>An array of all the Web3Wallet objects associated with the user, including the primary.</p> </li> <li> <code>saml_accounts</code>               (<code>List[SAMLAccount]</code>)           \u2013            <p>An experimental list of SAML accounts associated with the user.</p> </li> <li> <code>password_enabled</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the user has a password on their account.</p> </li> <li> <code>two_factor_enabled</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the user has enabled two-factor authentication.</p> </li> <li> <code>totp_enabled</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the user has enabled TOTP by generating a TOTP secret and verifying it via an authenticator app.</p> </li> <li> <code>backup_code_enabled</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the user has enabled Backup codes.</p> </li> <li> <code>last_sign_in_at</code>               (<code>Optional[int]</code>)           \u2013            <p>The date when the user last signed in, may be empty if the user has never signed in.</p> </li> <li> <code>banned</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the user is banned.</p> </li> <li> <code>locked</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the user is locked.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class User(BaseModel):\n    \"\"\"\n    Represents a user object with various attributes related to their profile, authentication, and metadata.\n\n    See the [Clerk documentation][1] for more details.\n\n    [1]: https://clerk.com/docs/users/overview\n\n    Attributes:\n        id: A unique identifier for the user.\n        object: The type of object, typically 'user'.\n        external_id: An optional external identifier for the user.\n        primary_email_address_id: The unique identifier for the EmailAddress that the user has set as primary.\n        primary_phone_number_id: The unique identifier for the PhoneNumber that the user has set as primary.\n        primary_web3_wallet_id: The unique identifier for the Web3Wallet that the user signed up with.\n        username: The user's username.\n        first_name: The user's first name.\n        last_name: The user's last name.\n        profile_image_url: Holds the default avatar or user's uploaded profile image. Compatible with Clerk's Image Optimization.\n        image_url: The URL of the user's profile image.\n        passkeys: An array of passkeys associated with the user's account.\n        has_image: A boolean to check if the user has uploaded an image or one was copied from OAuth. Returns false if Clerk is displaying an avatar for the user.\n        public_metadata: Metadata that can be read from the Frontend API and Backend API and can be set only from the Backend API.\n        private_metadata: Metadata that can be read and set only from the Backend API.\n        unsafe_metadata: Metadata that can be read and set from the Frontend API. Often used for custom fields attached to the User object.\n        email_addresses: An array of all the EmailAddress objects associated with the user, including the primary.\n        phone_numbers: An array of all the PhoneNumber objects associated with the user, including the primary.\n        web3_wallets: An array of all the Web3Wallet objects associated with the user, including the primary.\n        saml_accounts: An experimental list of SAML accounts associated with the user.\n        password_enabled: A boolean indicating whether the user has a password on their account.\n        two_factor_enabled: A boolean indicating whether the user has enabled two-factor authentication.\n        totp_enabled: A boolean indicating whether the user has enabled TOTP by generating a TOTP secret and verifying it via an authenticator app.\n        backup_code_enabled: A boolean indicating whether the user has enabled Backup codes.\n        last_sign_in_at: The date when the user last signed in, may be empty if the user has never signed in.\n        banned: A boolean indicating whether the user is banned.\n        locked: A boolean indicating whether the user is locked.\n    \"\"\"\n\n    id: str\n    \"\"\"A unique identifier for the user.\"\"\"\n\n    object: str\n    \"\"\"The type of object, typically 'user'.\"\"\"\n\n    external_id: Optional[str] = None\n    \"\"\"An optional external identifier for the user.\"\"\"\n\n    primary_email_address_id: Optional[str] = None\n    \"\"\"The unique identifier for the EmailAddress that the user has set as primary.\"\"\"\n\n    primary_phone_number_id: Optional[str] = None\n    \"\"\"The unique identifier for the PhoneNumber that the user has set as primary.\"\"\"\n\n    primary_web3_wallet_id: Optional[str] = None\n    \"\"\"The unique identifier for the Web3Wallet that the user signed up with.\"\"\"\n\n    username: Optional[str] = None\n    \"\"\"The user's username.\"\"\"\n\n    first_name: Optional[str] = None\n    \"\"\"The user's first name.\"\"\"\n\n    last_name: Optional[str] = None\n    \"\"\"The user's last name.\"\"\"\n\n    profile_image_url: Optional[str] = None\n    \"\"\"Holds the default avatar or user's uploaded profile image. Compatible with Clerk's Image Optimization.\"\"\"\n\n    image_url: Optional[str] = None\n    \"\"\"The URL of the user's profile image.\"\"\"\n\n    passkeys: Optional[List[PasskeyResource]] = None\n    \"\"\"An array of passkeys associated with the user's account.\"\"\"\n\n    has_image: bool\n    \"\"\"\n    A boolean to check if the user has uploaded an image or one was copied from OAuth.\n     Returns false if Clerk is displaying an avatar for the user.\n     \"\"\"\n\n    public_metadata: Dict[str, Any]\n    \"\"\"Metadata that can be read from the Frontend API and Backend API and can be set only from the Backend API.\"\"\"\n\n    private_metadata: Optional[Dict[str, Any]] = None\n    \"\"\"Metadata that can be read and set only from the Backend API.\"\"\"\n\n    unsafe_metadata: Dict[str, Any]\n    \"\"\"\n    Metadata that can be read and set from the Frontend API. Often used\n    for custom fields attached to the User object.\n    \"\"\"\n\n    email_addresses: List[EmailAddress]\n    \"\"\"An array of all the EmailAddress objects associated with the user, including the primary.\"\"\"\n\n    phone_numbers: List[PhoneNumber]\n    \"\"\"An array of all the PhoneNumber objects associated with the user, including the primary.\"\"\"\n\n    web3_wallets: List[Web3Wallet]\n    \"\"\"An array of all the Web3Wallet objects associated with the user, including the primary.\"\"\"\n\n    saml_accounts: List[SAMLAccount]\n    \"\"\"An experimental list of SAML accounts associated with the user.\"\"\"\n\n    password_enabled: bool\n    \"\"\"A boolean indicating whether the user has a password on their account.\"\"\"\n\n    two_factor_enabled: bool\n    \"\"\"A boolean indicating whether the user has enabled two-factor authentication.\"\"\"\n\n    totp_enabled: bool\n    \"\"\"\n    A boolean indicating whether the user has enabled TOTP by generating a TOTP secret\n    and verifying it via an authenticator app.\n    \"\"\"\n\n    backup_code_enabled: bool\n    \"\"\"A boolean indicating whether the user has enabled Backup codes.\"\"\"\n\n    last_sign_in_at: Optional[int] = None\n    \"\"\"The date when the user last signed in, may be empty if the user has never signed in.\"\"\"\n\n    banned: bool\n    \"\"\"A boolean indicating whether the user is banned.\"\"\"\n\n    locked: bool\n    \"\"\"A boolean indicating whether the user is locked.\"\"\"\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.PasskeyResource","title":"reflex_clerk.clerk_client.clerk_response_models.PasskeyResource","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a passkey associated with a user response.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The passkey's unique ID generated by Clerk.</p> </li> <li> <code>verification</code>               (<code>Verification</code>)           \u2013            <p>Verification details for the passkey.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The passkey's name.</p> </li> <li> <code>created_at</code>               (<code>str</code>)           \u2013            <p>The date and time when the passkey was created.</p> </li> <li> <code>updated_at</code>               (<code>str</code>)           \u2013            <p>The date and time when the passkey was updated.</p> </li> <li> <code>last_used_at</code>               (<code>str</code>)           \u2013            <p>The date and time when the passkey was last used.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class PasskeyResource(BaseModel):\n    \"\"\"\n    Represents a passkey associated with a user response.\n\n    Attributes:\n        id: The passkey's unique ID generated by Clerk.\n        verification: Verification details for the passkey.\n        name: The passkey's name.\n        created_at: The date and time when the passkey was created.\n        updated_at: The date and time when the passkey was updated.\n        last_used_at: The date and time when the passkey was last used.\n\n    \"\"\"\n\n    id: str\n    \"\"\"The passkey's unique ID generated by Clerk.\"\"\"\n\n    verification: Verification\n    \"\"\"Verification details for the passkey.\"\"\"\n\n    name: str\n    \"\"\"The passkey's name.\"\"\"\n\n    created_at: str\n    \"\"\"The date and time when the passkey was created.\"\"\"\n\n    updated_at: str\n    \"\"\"The date and time when the passkey was updated.\"\"\"\n\n    last_used_at: str\n    \"\"\"The date and time when the passkey was last used.\"\"\"\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.EmailAddress","title":"reflex_clerk.clerk_client.clerk_response_models.EmailAddress","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an email address associated with a user.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>A unique identifier for this email address.</p> </li> <li> <code>email_address</code>               (<code>str</code>)           \u2013            <p>The value of this email address.</p> </li> <li> <code>verification</code>               (<code>Optional[Verification]</code>)           \u2013            <p>An object holding information on the verification of this email address.</p> </li> <li> <code>linked_to</code>               (<code>List[IdentificationLink]</code>)           \u2013            <p>An array of objects containing information about any identifications that might be linked to this email address.</p> </li> <li> <code>created_at</code>               (<code>int</code>)           \u2013            <p>Unix timestamp of creation</p> </li> <li> <code>updated_at</code>               (<code>int</code>)           \u2013            <p>Unix timestamp of latest update</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class EmailAddress(BaseModel):\n    \"\"\"\n    Represents an email address associated with a user.\n\n    Attributes:\n        id: A unique identifier for this email address.\n        email_address: The value of this email address.\n        verification: An object holding information on the verification of this email address.\n        linked_to: An array of objects containing information about any identifications that might be linked to this email address.\n        created_at: Unix timestamp of creation\n        updated_at: Unix timestamp of latest update\n    \"\"\"\n    id: str\n    object: Literal['email_address']\n    email_address: str\n    reserved: bool\n    verification: Optional[Verification] = None\n    linked_to: List[IdentificationLink]\n    created_at: int\n    updated_at: int\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.PhoneNumber","title":"reflex_clerk.clerk_client.clerk_response_models.PhoneNumber","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a phone number associated with a user.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>A unique identifier for this phone number.</p> </li> <li> <code>phone_number</code>               (<code>str</code>)           \u2013            <p>The value of this phone number, in E.164 format\u00a0\u29c9.</p> </li> <li> <code>reserved_for_second_factor</code>               (<code>Optional[bool]</code>)           \u2013            <p>Set to true if this phone number is reserved for multi-factor authentication (2FA). Set to false otherwise.</p> </li> <li> <code>default_second_factor</code>               (<code>Optional[bool]</code>)           \u2013            <p>Marks this phone number as the default second factor for multi-factor authentication(2FA). A user can have exactly one default second factor.</p> </li> <li> <code>verification</code>               (<code>Optional[Verification]</code>)           \u2013            <p>An object holding information on the verification of this phone number.</p> </li> <li> <code>linked_to</code>               (<code>List[IdentificationLink]</code>)           \u2013            <p>An object containing information about any other identification that might be linked to this phone number.</p> </li> <li> <code>created_at</code>               (<code>int</code>)           \u2013            <p>Unix timestamp of creation</p> </li> <li> <code>updated_at</code>               (<code>int</code>)           \u2013            <p>Unix timestamp of latest update</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class PhoneNumber(BaseModel):\n    \"\"\"\n    Represents a phone number associated with a user.\n\n    Attributes:\n        id: A unique identifier for this phone number.\n        phone_number: The value of this phone number, in [E.164 format](https://en.wikipedia.org/wiki/E.164).\n        reserved_for_second_factor: Set to true if this phone number is reserved for multi-factor authentication (2FA). Set to false otherwise.\n        default_second_factor: Marks this phone number as the default second factor for multi-factor authentication(2FA). A user can have exactly one default second factor.\n        verification: An object holding information on the verification of this phone number.\n        linked_to: An object containing information about any other identification that might be linked to this phone number.\n        created_at: Unix timestamp of creation\n        updated_at: Unix timestamp of latest update\n    \"\"\"\n    id: str\n    object: Literal['phone_number']\n    phone_number: str\n    reserved_for_second_factor: Optional[bool]\n    default_second_factor: Optional[bool]\n    reserved: bool\n    verification: Optional[Verification] = None\n    linked_to: List[IdentificationLink]\n    backup_codes: Optional[List[str]] = None\n    created_at: int\n    updated_at: int\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.Web3Wallet","title":"reflex_clerk.clerk_client.clerk_response_models.Web3Wallet","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a Web3 wallet address associated with a user.</p> <p>The address can be used as a proof of identification for users.</p> <p>Web3 addresses must be verified to ensure that they can be assigned to their rightful owners. The verification is completed via Web3 wallet browser extensions, such as Metamask\u00a0\u29c9. The Web3Wallet3 object holds all the necessary state around the verification process.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>A unique identifier for this web3 wallet.</p> </li> <li> <code>web3_wallet</code>               (<code>str</code>)           \u2013            <p>In Ethereum\u00a0\u29c9,          the address is made up of 0x + 40 hexadecimal characters.</p> </li> <li> <code>created_at</code>               (<code>int</code>)           \u2013            <p>The date and time when the passkey was created.</p> </li> <li> <code>updated_at</code>               (<code>int</code>)           \u2013            <p>The date and time when the passkey was updated.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class Web3Wallet(BaseModel):\n    \"\"\"\n    Represents a Web3 wallet address associated with a user.\n\n    The address can be used as a proof of identification for users.\n\n    Web3 addresses must be verified to ensure that they can be assigned\n    to their rightful owners. The verification is completed via Web3 wallet\n    browser extensions, such as [Metamask][1]. The Web3Wallet3 object holds all\n    the necessary state around the verification process.\n\n    [1]: https://metamask.io/\n\n    Attributes:\n        id: A unique identifier for this web3 wallet.\n        web3_wallet: In [Ethereum](https://docs.metamask.io/guide/common-terms.html#address-public-key),\n                     the address is made up of 0x + 40 hexadecimal characters.\n        created_at: The date and time when the passkey was created.\n        updated_at: The date and time when the passkey was updated.\n    \"\"\"\n    id: str\n    web3_wallet: str\n    created_at: int\n    updated_at: int\n    verification: Optional[Verification] = None\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.SAMLAccount","title":"reflex_clerk.clerk_client.clerk_response_models.SAMLAccount","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a SAML account associated with a user.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>A unique identifier for the SAML account.</p> </li> <li> <code>object</code>               (<code>str</code>)           \u2013            <p>The type of object, typically 'saml_account'.</p> </li> <li> <code>provider</code>               (<code>str</code>)           \u2013            <p>The SAML provider associated with the account.</p> </li> <li> <code>active</code>               (<code>bool</code>)           \u2013            <p>A boolean indicating whether the SAML account is active.</p> </li> <li> <code>email_address</code>               (<code>str</code>)           \u2013            <p>The email address associated with the SAML account.</p> </li> <li> <code>first_name</code>               (<code>Optional[str]</code>)           \u2013            <p>The first name of the user associated with the SAML account.</p> </li> <li> <code>last_name</code>               (<code>Optional[str]</code>)           \u2013            <p>The last name of the user associated with the SAML account.</p> </li> <li> <code>provider_user_id</code>               (<code>Optional[str]</code>)           \u2013            <p>An optional identifier for the user within the SAML provider.</p> </li> <li> <code>public_metadata</code>               (<code>Dict[str, Any]</code>)           \u2013            <p>Metadata for the SAML account.</p> </li> <li> <code>verification</code>               (<code>Optional[Verification]</code>)           \u2013            <p>An optional verification object associated with the SAML account.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class SAMLAccount(BaseModel):\n    \"\"\"\n    Represents a SAML account associated with a user.\n\n    Attributes:\n        id: A unique identifier for the SAML account.\n        object: The type of object, typically 'saml_account'.\n        provider: The SAML provider associated with the account.\n        active: A boolean indicating whether the SAML account is active.\n        email_address: The email address associated with the SAML account.\n        first_name: The first name of the user associated with the SAML account.\n        last_name: The last name of the user associated with the SAML account.\n        provider_user_id: An optional identifier for the user within the SAML provider.\n        public_metadata: Metadata for the SAML account.\n        verification: An optional verification object associated with the SAML account.\n    \"\"\"\n    id: str\n    object: str\n    provider: str\n    active: bool\n    email_address: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    provider_user_id: Optional[str] = None\n    public_metadata: Dict[str, Any]\n    verification: Optional[Verification] = None\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.Verification","title":"reflex_clerk.clerk_client.clerk_response_models.Verification","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the verification details of an email address or phone number.</p> <p>Attributes:</p> <ul> <li> <code>strategy</code>               (<code>Optional[Literal['oauth_google', 'oauth_mock', 'admin', 'phone_code', 'email_code', 'reset_password_email_code', 'web3_metamask_signature']]</code>)           \u2013            <p>The strategy pertaining to the parent sign-up or sign-in attempt.</p> </li> <li> <code>status</code>               (<code>Optional[Literal['unverified', 'verified', 'transferable', 'failed', 'expired']]</code>)           \u2013            <p>The state of the verification.</p> </li> <li> <code>attempts</code>               (<code>Optional[int]</code>)           \u2013            <p>The number of attempts related to the verification.</p> </li> <li> <code>expire_at</code>               (<code>Optional[int]</code>)           \u2013            <p>The time the verification will expire at.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class Verification(BaseModel):\n    \"\"\"\n    Represents the verification details of an email address or phone number.\n\n    Attributes:\n        strategy: The strategy pertaining to the parent sign-up or sign-in attempt.\n        status: The state of the verification.\n        attempts: The number of attempts related to the verification.\n        expire_at: The time the verification will expire at.\n    \"\"\"\n    strategy: Optional[\n        Literal[\n            \"oauth_google\", \"oauth_mock\", \"admin\",\n            \"phone_code\", \"email_code\", \"reset_password_email_code\",\n            \"web3_metamask_signature\"\n        ]]\n    status: Optional[Literal['unverified', 'verified', 'transferable', 'failed', 'expired']]\n    nonce: Optional[str] = None\n    attempts: Optional[int] = None\n    expire_at: Optional[int] = None\n    error: Optional[ClerkError] = None\n    external_verification_redirect_url: Optional[str] = None\n</code></pre>"},{"location":"clerk_state/#reflex_clerk.clerk_client.clerk_response_models.IdentificationLink","title":"reflex_clerk.clerk_client.clerk_response_models.IdentificationLink","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a link between an email address or phone number and another identification type.</p> <p>Attributes:</p> <ul> <li> <code>type</code>               (<code>Literal['oauth_google', 'oauth_mock', 'saml']</code>)           \u2013            <p>One of \"oauth_google\", \"oauth_mock\", or \"saml\"</p> </li> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>A unique identifier for this link.</p> </li> </ul> Source code in <code>custom_components/reflex_clerk/clerk_client/clerk_response_models.py</code> <pre><code>class IdentificationLink(BaseModel):\n    \"\"\"\n    Represents a link between an email address or phone number and another identification type.\n\n    Attributes:\n        type: One of \"oauth_google\", \"oauth_mock\", or \"saml\"\n        id: A unique identifier for this link.\n    \"\"\"\n    type: Literal[\"oauth_google\", \"oauth_mock\", \"saml\"]\n    id: str\n</code></pre>"},{"location":"control_components/","title":"Control Components","text":""},{"location":"control_components/#reflex_clerk.signed_in","title":"reflex_clerk.signed_in","text":"<pre><code>signed_in(*children)\n</code></pre> <p>The  component renders its children only if there's a User with an active Session signed in your application. <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the SignedIn component.</p> <code>()</code> <p>Returns:</p> Type Description <code>SignedIn</code> <p>A SignedIn component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def signed_in(*children: rx.Component) -&gt; SignedIn:\n    \"\"\"\n    The &lt;SignedIn&gt; component renders its children only if there's a User with an active Session signed in your application.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the SignedIn component.\n\n    Returns:\n        A SignedIn component instance that can be rendered.\n    \"\"\"\n    return SignedIn.create(*children)\n</code></pre>"},{"location":"control_components/#reflex_clerk.signed_out","title":"reflex_clerk.signed_out","text":"<pre><code>signed_out(*children)\n</code></pre> <p>The  component renders its children only if there's no User with an active Session signed in your application. <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the SignedOut component.</p> <code>()</code> <p>Returns:</p> Type Description <code>SignedOut</code> <p>A SignedOut component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def signed_out(*children: rx.Component) -&gt; SignedOut:\n    \"\"\"\n    The &lt;SignedOut&gt; component renders its children only if there's no User with an active Session signed in your application.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the SignedOut component.\n\n    Returns:\n        A SignedOut component instance that can be rendered.\n    \"\"\"\n    return SignedOut.create(*children)\n</code></pre>"},{"location":"control_components/#reflex_clerk.redirect_to_sign_in","title":"reflex_clerk.redirect_to_sign_in","text":"<pre><code>redirect_to_sign_in()\n</code></pre> <p>The  component navigates to the sign-in URL configured in your application instance.</p> <p>Returns:</p> Type Description <code>RedirectToSignIn</code> <p>A RedirectToSignIn component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def redirect_to_sign_in() -&gt; RedirectToSignIn:\n    \"\"\"\n    The &lt;RedirectToSignIn /&gt; component navigates to the sign-in URL configured in your application instance.\n\n    Returns:\n        A RedirectToSignIn component instance that can be rendered.\n    \"\"\"\n    return RedirectToSignIn.create()\n</code></pre>"},{"location":"control_components/#reflex_clerk.redirect_to_sign_up","title":"reflex_clerk.redirect_to_sign_up","text":"<pre><code>redirect_to_sign_up()\n</code></pre> <p>The  component navigates to the sign-up URL configured in your application instance.</p> <p>Returns:</p> Type Description <code>RedirectToSignUp</code> <p>A RedirectToSignUp component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def redirect_to_sign_up() -&gt; RedirectToSignUp:\n    \"\"\"\n    The &lt;RedirectToSignUp /&gt; component navigates to the sign-up URL configured in your application instance.\n\n    Returns:\n        A RedirectToSignUp component instance that can be rendered.\n    \"\"\"\n    return RedirectToSignUp.create()\n</code></pre>"},{"location":"control_components/#reflex_clerk.redirect_to_user_profile","title":"reflex_clerk.redirect_to_user_profile","text":"<pre><code>redirect_to_user_profile()\n</code></pre> <p>The  component navigates to the user profile URL configured in your application instance.</p> <p>Returns:</p> Type Description <code>RedirectToUserProfile</code> <p>A RedirectToUserProfile component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def redirect_to_user_profile() -&gt; RedirectToUserProfile:\n    \"\"\"\n    The &lt;RedirectToUserProfile /&gt; component navigates to the user profile URL configured in your application instance.\n\n    Returns:\n        A RedirectToUserProfile component instance that can be rendered.\n    \"\"\"\n    return RedirectToUserProfile.create()\n</code></pre>"},{"location":"control_components/#reflex_clerk.redirect_to_organization_profile","title":"reflex_clerk.redirect_to_organization_profile","text":"<pre><code>redirect_to_organization_profile()\n</code></pre> <p>The  component navigates to the organization profile URL configured in your application instance.</p> <p>Returns:</p> Type Description <code>RedirectToOrganizationProfile</code> <p>A RedirectToOrganizationProfile component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def redirect_to_organization_profile() -&gt; RedirectToOrganizationProfile:\n    \"\"\"\n    The &lt;RedirectToOrganizationProfile /&gt; component navigates to the organization profile URL configured in your application instance.\n\n    Returns:\n        A RedirectToOrganizationProfile component instance that can be rendered.\n    \"\"\"\n    return RedirectToOrganizationProfile.create()\n</code></pre>"},{"location":"control_components/#reflex_clerk.redirect_to_create_organization","title":"reflex_clerk.redirect_to_create_organization","text":"<pre><code>redirect_to_create_organization(*children)\n</code></pre> <p>The  component navigates to the create organization URL configured in your application instance.</p> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the RedirectToCreateOrganization component.</p> <code>()</code> <p>Returns:</p> Type Description <code>RedirectToCreateOrganization</code> <p>A RedirectToCreateOrganization component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def redirect_to_create_organization(*children: rx.Component) -&gt; RedirectToCreateOrganization:\n    \"\"\"\n    The &lt;RedirectToCreateOrganization /&gt; component navigates to the create organization URL configured in your application instance.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the RedirectToCreateOrganization component.\n\n    Returns:\n        A RedirectToCreateOrganization component instance that can be rendered.\n    \"\"\"\n    return RedirectToCreateOrganization.create(*children)\n</code></pre>"},{"location":"control_components/#reflex_clerk.multisession_app_support","title":"reflex_clerk.multisession_app_support","text":"<pre><code>multisession_app_support(*children)\n</code></pre> <p>The  provides a wrapper for your React application that guarantees a full rerendering cycle everytime the current session and user changes. <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the MultisessionAppSupport component.</p> <code>()</code> <p>Returns:</p> Type Description <code>MultisessionAppSupport</code> <p>A MultisessionAppSupport component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def multisession_app_support(*children: rx.Component) -&gt; MultisessionAppSupport:\n    \"\"\"\n    The &lt;MultisessionAppSupport&gt; provides a wrapper for your React application that guarantees a full rerendering cycle everytime the current session and user changes.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the MultisessionAppSupport component.\n\n    Returns:\n        A MultisessionAppSupport component instance that can be rendered.\n    \"\"\"\n    return MultisessionAppSupport.create(*children)\n</code></pre>"},{"location":"control_components/#reflex_clerk.clerk_loading","title":"reflex_clerk.clerk_loading","text":"<pre><code>clerk_loading(*children)\n</code></pre> <p>The  component indicates that Clerk is still loading. <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the ClerkLoading component.</p> <code>()</code> <p>Returns:</p> Type Description <code>ClerkLoading</code> <p>A ClerkLoading component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def clerk_loading(*children: rx.Component) -&gt; ClerkLoading:\n    \"\"\"\n    The &lt;ClerkLoading&gt; component indicates that Clerk is still loading.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the ClerkLoading component.\n\n    Returns:\n        A ClerkLoading component instance that can be rendered.\n    \"\"\"\n    return ClerkLoading.create(*children)\n</code></pre>"},{"location":"control_components/#reflex_clerk.clerk_loaded","title":"reflex_clerk.clerk_loaded","text":"<pre><code>clerk_loaded(*children)\n</code></pre> <p>The  component indicates that Clerk is fully loaded. <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the ClerkLoaded component.</p> <code>()</code> <p>Returns:</p> Type Description <code>ClerkLoaded</code> <p>A ClerkLoaded component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def clerk_loaded(*children: rx.Component) -&gt; ClerkLoaded:\n    \"\"\"\n    The &lt;ClerkLoaded&gt; component indicates that Clerk is fully loaded.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the ClerkLoaded component.\n\n    Returns:\n        A ClerkLoaded component instance that can be rendered.\n    \"\"\"\n    return ClerkLoaded.create(*children)\n</code></pre>"},{"location":"control_components/#reflex_clerk.protect","title":"reflex_clerk.protect","text":"<pre><code>protect(\n    *children,\n    condition=None,\n    fallback=None,\n    permission=None,\n    role=None\n)\n</code></pre> <p>The  component conditionally renders its children based on the provided logic. <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the Protect component.</p> <code>()</code> <code>condition</code> <code>Javascript</code> <p>Optional conditional logic that renders the children if it returns true.</p> <code>None</code> <code>fallback</code> <code>Union[Component, str]</code> <p>An optional snippet of JSX to show when a user doesn't have the role or permission to access the protected content.</p> <code>None</code> <code>permission</code> <code>str</code> <p>Optional string corresponding to a Role's Permission in the format org::. <code>None</code> <code>role</code> <code>str</code> <p>Optional string corresponding to an Organization's Role in the format org:. <code>None</code> <p>Returns:</p> Type Description <code>Protect</code> <p>A Protect component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/control.py</code> <pre><code>def protect(\n        *children: rx.Component,\n        condition: Javascript = None,\n        fallback: typing.Union[rx.Component, str] = None,\n        permission: str = None,\n        role: str = None\n) -&gt; Protect:\n    \"\"\"\n    The &lt;Protect&gt; component conditionally renders its children based on the provided logic.\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the Protect component.\n        condition: Optional conditional logic that renders the children if it returns true.\n        fallback: An optional snippet of JSX to show when a user doesn't have the role or permission to access the protected content.\n        permission: Optional string corresponding to a Role's Permission in the format org:&lt;resource&gt;:&lt;action&gt;.\n        role: Optional string corresponding to an Organization's Role in the format org:&lt;role&gt;.\n\n    Returns:\n        A Protect component instance that can be rendered.\n    \"\"\"\n    return Protect.create(\n        *children,\n        condition=condition,\n        fallback=fallback,\n        permission=permission,\n        role=role\n    )\n</code></pre>"},{"location":"page_setup/","title":"Page Setup","text":""},{"location":"page_setup/#reflex_clerk.install_pages","title":"reflex_clerk.install_pages","text":"<pre><code>install_pages(\n    app,\n    publishable_key=None,\n    signin_route=\"/signin\",\n    signup_route=\"/signup\",\n    **props\n)\n</code></pre> <p>Installs the signin and signup pages for the given app.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>App</code> <p>The app instance for which the pages need to be installed.</p> required <code>publishable_key</code> <code>str</code> <p>The publishable key to be used for payment processing. Defaults to None.</p> <code>None</code> <code>signin_route</code> <code>str</code> <p>The route at which the signin page should be installed. Defaults to \"/signin\".</p> <code>'/signin'</code> <code>signup_route</code> <code>str</code> <p>The route at which the signup page should be installed. Defaults to \"/signup\".</p> <code>'/signup'</code> Example <pre><code>import reflex_clerk as clerk\nimport reflex as rx\napp = rx.App()\nclerk.install_pages(app, publishable_key='your_publishable_key')\n</code></pre> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>custom_components/reflex_clerk/lib/reflex_clerk.py</code> <pre><code>def install_pages(\n        app: rx.App,\n        publishable_key=None,\n        signin_route=\"/signin\",\n        signup_route=\"/signup\",\n        **props\n) -&gt; None:\n    \"\"\"Installs the signin and signup pages for the given app.\n\n    Args:\n        app (rx.App): The app instance for which the pages need to be installed.\n        publishable_key (str, optional): The publishable key to be used for payment processing. Defaults to None.\n        signin_route (str, optional): The route at which the signin page should be installed. Defaults to \"/signin\".\n        signup_route (str, optional): The route at which the signup page should be installed. Defaults to \"/signup\".\n\n    Example:\n        ```python\n        import reflex_clerk as clerk\n        import reflex as rx\n        app = rx.App()\n        clerk.install_pages(app, publishable_key='your_publishable_key')\n        ```\n\n    Returns:\n        None\n    \"\"\"\n    install_signin_page(app, publishable_key=publishable_key, route=signin_route, **props)\n    install_signup_page(app, publishable_key=publishable_key, route=signup_route, **props)\n</code></pre>"},{"location":"page_setup/#reflex_clerk.install_signin_page","title":"reflex_clerk.install_signin_page","text":"<pre><code>install_signin_page(\n    app, publishable_key=None, route=\"/signin\", **props\n)\n</code></pre> <p>This method installs a login page on the given App instance. It creates a centered layout using the rx.center() function, with a sign-in form generated by the reflex_clerk.sign_in function. The sign-in form is vertically stacked using the rx.vstack() function, with a spacing of 7 units between each element. The entire layout is set to a height of 100vh.</p> <p>The login page is then installed on the App instance using the clerk_provider() function. If a publishable key is provided, it will be used for authentication.</p> Example <pre><code>import reflex_clerk\napp = App()\nreflex_clerk.install_signin_page(app, publishable_key='your_publishable_key')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>App</code> <p>The app instance to install the login page on.</p> required <code>publishable_key</code> <code>str</code> <p>The publishable key to use for authentication.</p> <code>None</code> <code>route</code> <code>str</code> <p>The route to install the login page on.  Defaults to \"/signin\".</p> <code>'/signin'</code> Source code in <code>custom_components/reflex_clerk/lib/reflex_clerk.py</code> <pre><code>def install_signin_page(app: rx.App, publishable_key=None, route=\"/signin\", **props) -&gt; None:\n    \"\"\"\n    This method installs a login page on the given App instance.\n    It creates a centered layout using the rx.center() function,\n    with a sign-in form generated by the [reflex_clerk.sign_in][] function.\n    The sign-in form is vertically stacked using the rx.vstack() function,\n    with a spacing of 7 units between each element. The entire layout is\n    set to a height of 100vh.\n\n    The login page is then installed on the App instance using the\n    clerk_provider() function. If a publishable key is provided,\n    it will be used for authentication.\n\n    Example:\n        ```python\n        import reflex_clerk\n        app = App()\n        reflex_clerk.install_signin_page(app, publishable_key='your_publishable_key')\n        ```\n\n    Parameters:\n        app (rx.App): The app instance to install the login page on.\n        publishable_key (str): The publishable key to use for authentication.\n        route (str): The route to install the login page on.  Defaults to \"/signin\".\n\n\n    \"\"\"\n\n    assert route.startswith(\"/\"), \"Expected route to be absolute (e.g. starts with '/')\"\n\n    signin_page = clerk_provider(\n        rx.center(\n            rx.vstack(\n                sign_in(\n                    path=route,\n                    **props\n                ),\n                align=\"center\",\n                spacing=\"7\",\n            ),\n            height=\"100vh\",\n        ),\n        publishable_key=publishable_key\n    )\n\n    app.pages[route[1:] + \"/[[...signin]]/index\"] = signin_page\n</code></pre>"},{"location":"page_setup/#reflex_clerk.install_signup_page","title":"reflex_clerk.install_signup_page","text":"<pre><code>install_signup_page(\n    app, publishable_key=None, route=\"/signup\", **props\n)\n</code></pre> <p>This method installs a signup page on the given App instance. It creates a centered layout using the rx.center() function, with a sign-in form generated by the reflex_clerk.sign_up function. The sign-in form is vertically stacked using the rx.vstack() function, with a spacing of 7 units between each element. The entire layout is set to a height of 100vh.</p> <p>The login page is then installed on the App instance using the clerk_provider() function. If a publishable key is provided, it will be used for authentication.</p> Example <pre><code>import reflex_clerk\napp = App()\nreflex_clerk.install_signup_page(app, publishable_key='your_publishable_key')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>App</code> <p>The app instance to install the login page on.</p> required <code>publishable_key</code> <code>str</code> <p>The publishable key to use for authentication.</p> <code>None</code> <code>route</code> <code>str</code> <p>The route to install the login page on.  Defaults to \"/signup\".</p> <code>'/signup'</code> Source code in <code>custom_components/reflex_clerk/lib/reflex_clerk.py</code> <pre><code>def install_signup_page(app: rx.App, publishable_key=None, route=\"/signup\", **props) -&gt; None:\n    \"\"\"\n    This method installs a signup page on the given App instance.\n    It creates a centered layout using the rx.center() function,\n    with a sign-in form generated by the [reflex_clerk.sign_up][] function.\n    The sign-in form is vertically stacked using the rx.vstack() function,\n    with a spacing of 7 units between each element. The entire layout is\n    set to a height of 100vh.\n\n    The login page is then installed on the App instance using the\n    clerk_provider() function. If a publishable key is provided,\n    it will be used for authentication.\n\n    Example:\n        ```python\n        import reflex_clerk\n        app = App()\n        reflex_clerk.install_signup_page(app, publishable_key='your_publishable_key')\n        ```\n\n    Parameters:\n        app (rx.App): The app instance to install the login page on.\n        publishable_key (str): The publishable key to use for authentication.\n        route (str): The route to install the login page on.  Defaults to \"/signup\".\n\n\n    \"\"\"\n\n    assert route.startswith(\"/\"), \"Expected route to be absolute (e.g. starts with '/')\"\n\n    signup_page = clerk_provider(\n        rx.center(\n            rx.vstack(\n                sign_up(\n                    path=route,\n                    **props\n                ),\n                align=\"center\",\n                spacing=\"7\",\n            ),\n            height=\"100vh\",\n        ),\n        publishable_key=publishable_key\n    )\n\n    app.pages[route[1:] + \"/[[...signup]]/index\"] = signup_page\n</code></pre>"},{"location":"ui_components/","title":"UI Components","text":""},{"location":"ui_components/#buttons","title":"Buttons","text":""},{"location":"ui_components/#signinbutton","title":"&lt;SignInButton /&gt;","text":"<pre><code>import reflex_clerk as clerk\nimport reflex as rx\n\nclerk.sign_in_button(\n    rx.button(\"Sign In\")\n)\n</code></pre>"},{"location":"ui_components/#reflex_clerk.sign_in_button","title":"reflex_clerk.sign_in_button","text":"<pre><code>sign_in_button(\n    *children,\n    force_redirect_url=None,\n    fallback_redirect_url=None,\n    sign_up_force_redirect_url=None,\n    sign_up_fallback_redirect_url=None,\n    mode=\"redirect\"\n)\n</code></pre> <p>The  component is a button that links to the sign-in page or displays the sign-in modal. <p>This button is un-styled, and is intended to wrap around an rx.button component.</p> <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            clerk.sign_in_button(\n                rx.button(\"Sign In\")\n            )\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the sign-in button.</p> <code>()</code> <code>force_redirect_url</code> <code>Optional[str]</code> <p>The URL to redirect to after the user successfully signs in. Defaults to None.</p> <code>None</code> <code>fallback_redirect_url</code> <code>Optional[str]</code> <p>The URL to redirect to if an error occurs during the sign-in process. Defaults to None.</p> <code>None</code> <code>sign_up_force_redirect_url</code> <code>Optional[str]</code> <p>The URL to redirect to after the user successfully signs up. Defaults to None.</p> <code>None</code> <code>sign_up_fallback_redirect_url</code> <code>Optional[str]</code> <p>The URL to redirect to if an error occurs during the sign-up process. Defaults to None.</p> <code>None</code> <code>mode</code> <code>Literal['redirect', 'modal']</code> <p>The mode of the sign-in button. It can be either 'redirect' or 'modal'. Defaults to None.</p> <code>'redirect'</code> <p>Returns:</p> Type Description <code>SignInButton</code> <p>A SignInButton component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/sign_in.py</code> <pre><code>def sign_in_button(\n        *children: rx.Component,\n        force_redirect_url: typing.Optional[str] = None,\n        fallback_redirect_url: typing.Optional[str] = None,\n        sign_up_force_redirect_url: typing.Optional[str] = None,\n        sign_up_fallback_redirect_url: typing.Optional[str] = None,\n        mode: typing.Literal['redirect', 'modal'] = 'redirect'\n) -&gt; SignInButton:\n    \"\"\"\n    The &lt;SignInButton&gt; component is a button that links to the sign-in page or displays the sign-in modal.\n\n    This button is un-styled, and is intended to wrap around an rx.button component.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    clerk.sign_in_button(\n                        rx.button(\"Sign In\")\n                    )\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the sign-in button.\n        force_redirect_url: The URL to redirect to after the user successfully signs in. Defaults to None.\n        fallback_redirect_url: The URL to redirect to if an error occurs during the sign-in process. Defaults to None.\n        sign_up_force_redirect_url: The URL to redirect to after the user successfully signs up. Defaults to None.\n        sign_up_fallback_redirect_url: The URL to redirect to if an error occurs during the sign-up process. Defaults to None.\n        mode: The mode of the sign-in button. It can be either 'redirect' or 'modal'. Defaults to None.\n\n    Returns:\n        A SignInButton component instance that can be rendered.\n    \"\"\"\n    return SignInButton.create(\n        *children,\n        force_redirect_url=force_redirect_url,\n        fallback_redirect_url=fallback_redirect_url,\n        sign_up_force_redirect_url=sign_up_force_redirect_url,\n        sign_up_fallback_redirect_url=sign_up_fallback_redirect_url,\n        mode=mode\n    )\n</code></pre>"},{"location":"ui_components/#signupbutton","title":"&lt;SignUpButton /&gt;","text":"<pre><code>import reflex_clerk as clerk\nimport reflex as rx\n\nclerk.sign_up_button(\n    rx.button(\"Sign Up\")\n)\n</code></pre>"},{"location":"ui_components/#reflex_clerk.sign_up_button","title":"reflex_clerk.sign_up_button","text":"<pre><code>sign_up_button(\n    *children,\n    force_redirect_url=None,\n    fallback_redirect_url=None,\n    sign_in_force_redirect_url=None,\n    sign_in_fallback_redirect_url=None,\n    mode=\"redirect\"\n)\n</code></pre> <p>The  component is a button that links to the sign-up page or displays the sign-up modal. <p>This button is un-styled, and is intended to wrap around an rx.button component.</p> <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            clerk.sign_up_button(\n                rx.button(\"Sign Up\")\n            )\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>force_redirect_url</code> <code>str</code> <p>The URL to redirect to after the user successfully signs in. Defaults to None.</p> <code>None</code> <code>fallback_redirect_url</code> <code>str</code> <p>The URL to redirect to if an error occurs during the sign-in process. Defaults to None.</p> <code>None</code> <code>sign_in_force_redirect_url</code> <code>str</code> <p>The URL to redirect to after the user successfully signs up. Defaults to None.</p> <code>None</code> <code>sign_in_fallback_redirect_url</code> <code>str</code> <p>The URL to redirect to if an error occurs during the sign-up process. Defaults to None.</p> <code>None</code> <code>mode</code> <code>Literal['redirect', 'modal']</code> <p>The mode of the sign-up button. It can be either 'redirect' or 'modal'. Defaults to 'redirect'.</p> <code>'redirect'</code> <p>Returns:</p> Type Description <code>SignUpButton</code> <p>A SignUpButton component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/sign_up.py</code> <pre><code>def sign_up_button(\n        *children: rx.Component,\n        force_redirect_url: str = None,\n        fallback_redirect_url: str = None,\n        sign_in_force_redirect_url: str = None,\n        sign_in_fallback_redirect_url: str = None,\n        mode: typing.Literal['redirect', 'modal'] = 'redirect'\n) -&gt; SignUpButton:\n    \"\"\"\n    The &lt;SignUpButton&gt; component is a button that links to the sign-up page\n    or displays the sign-up modal.\n\n    This button is un-styled, and is intended to wrap around an rx.button component.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    clerk.sign_up_button(\n                        rx.button(\"Sign Up\")\n                    )\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        force_redirect_url: The URL to redirect to after the user successfully signs in. Defaults to None.\n        fallback_redirect_url: The URL to redirect to if an error occurs during the sign-in process. Defaults to None.\n        sign_in_force_redirect_url: The URL to redirect to after the user successfully signs up. Defaults to None.\n        sign_in_fallback_redirect_url: The URL to redirect to if an error occurs during the sign-up process. Defaults to None.\n        mode: The mode of the sign-up button. It can be either 'redirect' or 'modal'. Defaults to 'redirect'.\n\n    Returns:\n        A SignUpButton component instance that can be rendered.\n    \"\"\"\n    return SignUpButton.create(\n        *children,\n        force_redirect_url=force_redirect_url,\n        fallback_redirect_url=fallback_redirect_url,\n        sign_in_force_redirect_url=sign_in_force_redirect_url,\n        sign_in_fallback_redirect_url=sign_in_fallback_redirect_url,\n        mode=mode\n    )\n</code></pre>"},{"location":"ui_components/#signoutbutton","title":"&lt;SignOutButton /&gt;","text":"<pre><code>import reflex_clerk as clerk\nimport reflex as rx\n\nclerk.sign_out_button(\n    rx.button(\"Sign Out\")\n)\n</code></pre>"},{"location":"ui_components/#reflex_clerk.sign_out_button","title":"reflex_clerk.sign_out_button","text":"<pre><code>sign_out_button(*children, options=None, redirect_url=None)\n</code></pre> <p>The  component is a button that signs out the user and redirects them to a specified URL. <p>This button is un-styled, and is intended to wrap around an rx.button component.</p> <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            clerk.sign_out_button(\n                rx.button(\"Sign Out\")\n            )\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the sign-out button.</p> <code>()</code> <code>options</code> <code>SignOutOptions</code> <p>Options for the sign-out button. Defaults to None.</p> <code>None</code> <code>redirect_url</code> <code>str</code> <p>The URL to redirect to after sign-out. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>SignOutButton</code> <p>A SignOutButton component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/sign_out.py</code> <pre><code>def sign_out_button(\n        *children: rx.Component,\n        options: SignOutOptions = None,\n        redirect_url: str = None\n) -&gt; SignOutButton:\n    \"\"\"\n    The &lt;SignOutButton&gt; component is a button that signs out the user and redirects them to a specified URL.\n\n    This button is un-styled, and is intended to wrap around an rx.button component.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    clerk.sign_out_button(\n                        rx.button(\"Sign Out\")\n                    )\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the sign-out button.\n        options: Options for the sign-out button. Defaults to None.\n        redirect_url: The URL to redirect to after sign-out. Defaults to None.\n\n    Returns:\n        A SignOutButton component instance that can be rendered.\n    \"\"\"\n    return SignOutButton.create(\n        *children,\n        options=options,\n        redirect_url=redirect_url\n    )\n</code></pre>"},{"location":"ui_components/#userbutton","title":"&lt;UserButton /&gt;","text":"<pre><code>import reflex_clerk as clerk\n\nclerk.user_button()\n</code></pre>"},{"location":"ui_components/#reflex_clerk.user_button","title":"reflex_clerk.user_button","text":"<pre><code>user_button(\n    *children,\n    appearance=None,\n    show_name=None,\n    sign_in_url=None,\n    user_profile_mode=\"modal\",\n    user_profile_url=None,\n    after_sign_out_url=None,\n    after_multi_session_single_sign_out_url=None,\n    after_switch_session_url=None,\n    default_open=None,\n    user_profile_props=None\n)\n</code></pre> <p>The  component displays a user image button that can be configured with various options. <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            clerk.user_button()\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>appearance</code> <code>Appearance</code> <p>Optional object to style the component. Will only affect Clerk Components and not Account Portal pages.</p> <code>None</code> <code>show_name</code> <code>bool</code> <p>Controls if the user name is displayed next to the user image button. Defaults to False.</p> <code>None</code> <code>sign_in_url</code> <code>str</code> <p>Full URL or path to navigate to when the Add another account button is clicked.</p> <code>None</code> <code>user_profile_mode</code> <code>Literal['modal', 'navigation']</code> <p>Controls whether clicking the Manage your account button will open the  component as a modal or navigate to the userProfileUrl. Defaults to 'modal'.</p> <code>'modal'</code> <code>user_profile_url</code> <code>str</code> <p>Full URL or path leading to the user management interface.</p> <code>None</code> <code>after_sign_out_url</code> <code>str</code> <p>Full URL or path to navigate to after signing out from all accounts. Defaults to '/'.</p> <code>None</code> <code>after_multi_session_single_sign_out_url</code> <code>str</code> <p>Full URL or path to navigate to after signing out from the currently active account in multi-session apps.</p> <code>None</code> <code>after_switch_session_url</code> <code>str</code> <p>Full URL or path to navigate to after a successful account change in multi-session apps.</p> <code>None</code> <code>default_open</code> <code>bool</code> <p>Controls whether the  should open by default during the first render. Defaults to None.</p> <code>None</code> <code>user_profile_props</code> <code>dict</code> <p>Options for the underlying  component.</p> <code>None</code> <p>Returns:</p> Type Description <code>UserButton</code> <p>A UserButton component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/user.py</code> <pre><code>def user_button(\n        *children: rx.Component,\n        appearance: Appearance = None,\n        show_name: bool = None,\n        sign_in_url: str = None,\n        user_profile_mode: typing.Literal['modal', 'navigation'] = 'modal',\n        user_profile_url: str = None,\n        after_sign_out_url: str = None,\n        after_multi_session_single_sign_out_url: str = None,\n        after_switch_session_url: str = None,\n        default_open: bool = None,\n        user_profile_props: dict = None\n) -&gt; UserButton:\n    \"\"\"\n    The &lt;UserButton&gt; component displays a user image button that can be configured with various options.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    clerk.user_button()\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        appearance: Optional object to style the component. Will only affect Clerk Components and not Account Portal pages.\n        show_name: Controls if the user name is displayed next to the user image button. Defaults to False.\n        sign_in_url: Full URL or path to navigate to when the Add another account button is clicked.\n        user_profile_mode: Controls whether clicking the Manage your account button will open the &lt;UserProfile /&gt; component as a modal or navigate to the userProfileUrl. Defaults to 'modal'.\n        user_profile_url: Full URL or path leading to the user management interface.\n        after_sign_out_url: Full URL or path to navigate to after signing out from all accounts. Defaults to '/'.\n        after_multi_session_single_sign_out_url: Full URL or path to navigate to after signing out from the currently active account in multi-session apps.\n        after_switch_session_url: Full URL or path to navigate to after a successful account change in multi-session apps.\n        default_open: Controls whether the &lt;UserButton /&gt; should open by default during the first render. Defaults to None.\n        user_profile_props: Options for the underlying &lt;UserProfile /&gt; component.\n\n    Returns:\n        A UserButton component instance that can be rendered.\n    \"\"\"\n    return UserButton.create(\n        *children,\n        appearance=appearance,\n        show_name=show_name,\n        sign_in_url=sign_in_url,\n        user_profile_mode=user_profile_mode,\n        user_profile_url=user_profile_url,\n        after_sign_out_url=after_sign_out_url,\n        after_multi_session_single_sign_out_url=after_multi_session_single_sign_out_url,\n        after_switch_session_url=after_switch_session_url,\n        default_open=default_open,\n        user_profile_props=user_profile_props\n    )\n</code></pre>"},{"location":"ui_components/#authentication-components","title":"Authentication Components","text":""},{"location":"ui_components/#signin","title":"&lt;SignIn /&gt;","text":"<pre><code>import reflex_clerk as clerk\n\nclerk.sign_in()\n</code></pre> <p>The  component renders a sign-in form. <p>Instead of using this component directly, consider using the pre-configured sign-in page configured with <code>reflex_clerk.install_signin_page</code>.</p> <p>This form can be styled and configured with various routing and redirection options.</p> <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            rx.heading(\"Welcome, please sign in!\"),\n            clerk.sign_in()\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>appearance</code> <code>Appearance</code> <p>The appearance configuration for the sign-in form.</p> <code>None</code> <code>routing</code> <code>Literal['hash', 'path', 'virtual']</code> <p>The routing strategy for the pages. Can be 'hash', 'path', or 'virtual'. Defaults to None.</p> <code>None</code> <code>path</code> <code>str</code> <p>The path where the component is mounted when routing is set to 'path'. Ignored for 'hash' and 'virtual' routing.</p> <code>None</code> <code>sign_up_url</code> <code>str</code> <p>Full URL or path to the sign-up page.</p> <code>None</code> <code>force_redirect_url</code> <code>str</code> <p>URL to redirect to after sign-in. Takes priority over deprecated props.</p> <code>None</code> <code>fallback_redirect_url</code> <code>str</code> <p>Fallback URL to redirect to after sign-in if no redirect URL is provided in the path. Defaults to '/'.</p> <code>None</code> <code>sign_up_force_redirect_url</code> <code>str</code> <p>URL to redirect to after sign-up. Takes priority over deprecated props.</p> <code>None</code> <code>sign_up_fallback_redirect_url</code> <code>str</code> <p>Fallback URL to redirect to after sign-up if no redirect URL is provided in the path. Defaults to '/'.</p> <code>None</code> <code>initial_values</code> <code>Optional[SignInInitialValues]</code> <p>Prefilled values for the sign-in fields. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>SignIn</code> <p>A SignIn component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/sign_in.py</code> <pre><code>def sign_in(\n        *children: rx.Component,\n        appearance: Appearance = None,\n        routing: typing.Literal['hash', 'path', 'virtual'] = None,\n        path: str = None,\n        sign_up_url: str = None,\n        force_redirect_url: str = None,\n        fallback_redirect_url: str = None,\n        sign_up_force_redirect_url: str = None,\n        sign_up_fallback_redirect_url: str = None,\n        initial_values: typing.Optional[SignInInitialValues] = None\n) -&gt; SignIn:\n    \"\"\"\n    The &lt;SignIn&gt; component renders a sign-in form.\n\n    Instead of using this component directly, consider using the pre-configured sign-in\n    page configured with [`reflex_clerk.install_signin_page`][].\n\n    This form can be styled and configured with various routing and redirection options.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    rx.heading(\"Welcome, please sign in!\"),\n                    clerk.sign_in()\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        appearance: The appearance configuration for the sign-in form.\n        routing: The routing strategy for the pages. Can be 'hash', 'path', or 'virtual'. Defaults to None.\n        path: The path where the component is mounted when routing is set to 'path'. Ignored for 'hash' and 'virtual' routing.\n        sign_up_url: Full URL or path to the sign-up page.\n        force_redirect_url: URL to redirect to after sign-in. Takes priority over deprecated props.\n        fallback_redirect_url: Fallback URL to redirect to after sign-in if no redirect URL is provided in the path. Defaults to '/'.\n        sign_up_force_redirect_url: URL to redirect to after sign-up. Takes priority over deprecated props.\n        sign_up_fallback_redirect_url: Fallback URL to redirect to after sign-up if no redirect URL is provided in the path. Defaults to '/'.\n        initial_values: Prefilled values for the sign-in fields. Defaults to None.\n\n    Returns:\n        A SignIn component instance that can be rendered.\n    \"\"\"\n    return SignIn.create(\n        *children,\n        appearance=appearance,\n        routing=routing,\n        path=path,\n        sign_up_url=sign_up_url,\n        force_redirect_url=force_redirect_url,\n        fallback_redirect_url=fallback_redirect_url,\n        sign_up_force_redirect_url=sign_up_force_redirect_url,\n        sign_up_fallback_redirect_url=sign_up_fallback_redirect_url,\n        initial_values=initial_values\n    )\n</code></pre>"},{"location":"ui_components/#signup","title":"&lt;SignUp /&gt;","text":"<pre><code>import reflex_clerk as clerk\n\nclerk.sign_up()\n</code></pre> <p>The  component renders a sign-up form. <p>Instead of using this component directly, consider using the pre-configured sign-in page configured with <code>reflex_clerk.install_signup_page</code>.</p> <p>This form can be styled and configured with various routing and redirection options.</p> <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            rx.heading(\"Welcome, please sign up!\"),\n            clerk.sign_up()\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>appearance</code> <code>Appearance</code> <p>The appearance configuration for the sign-up form.</p> <code>None</code> <code>routing</code> <code>Literal['hash', 'path', 'virtual']</code> <p>The routing strategy for the pages. Can be 'hash', 'path', or 'virtual'. Defaults to None.</p> <code>None</code> <code>path</code> <code>str</code> <p>The path where the component is mounted when routing is set to 'path'. Ignored for 'hash' and 'virtual' routing.</p> <code>None</code> <code>sign_in_url</code> <code>str</code> <p>Full URL or path to the sign-in page.</p> <code>None</code> <code>force_redirect_url</code> <code>str</code> <p>URL to redirect to after sign-in. Takes priority over deprecated props.</p> <code>None</code> <code>fallback_redirect_url</code> <code>str</code> <p>Fallback URL to redirect to after sign-in if no redirect URL is provided in the path. Defaults to '/'.</p> <code>None</code> <code>sign_in_force_redirect_url</code> <code>str</code> <p>URL to redirect to after sign-up. Takes priority over deprecated props.</p> <code>None</code> <code>sign_in_fallback_redirect_url</code> <code>str</code> <p>Fallback URL to redirect to after sign-up if no redirect URL is provided in the path. Defaults to '/'.</p> <code>None</code> <code>initial_values</code> <code>Optional[SignUpInitialValues]</code> <p>Prefilled values for the sign-up fields. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>SignUp</code> <p>A SignUp component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/sign_up.py</code> <pre><code>def sign_up(\n        *children: rx.Component,\n        appearance: Appearance = None,\n        routing: typing.Literal['hash', 'path', 'virtual'] = None,\n        path: str = None,\n        sign_in_url: str = None,\n        force_redirect_url: str = None,\n        fallback_redirect_url: str = None,\n        sign_in_force_redirect_url: str = None,\n        sign_in_fallback_redirect_url: str = None,\n        initial_values: typing.Optional[SignUpInitialValues] = None\n) -&gt; SignUp:\n    \"\"\"\n    The &lt;SignUp&gt; component renders a sign-up form.\n\n    Instead of using this component directly, consider using the pre-configured sign-in\n    page configured with [`reflex_clerk.install_signup_page`][].\n\n    This form can be styled and configured with various routing and redirection options.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    rx.heading(\"Welcome, please sign up!\"),\n                    clerk.sign_up()\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        appearance: The appearance configuration for the sign-up form.\n        routing: The routing strategy for the pages. Can be 'hash', 'path', or 'virtual'. Defaults to None.\n        path: The path where the component is mounted when routing is set to 'path'. Ignored for 'hash' and 'virtual' routing.\n        sign_in_url: Full URL or path to the sign-in page.\n        force_redirect_url: URL to redirect to after sign-in. Takes priority over deprecated props.\n        fallback_redirect_url: Fallback URL to redirect to after sign-in if no redirect URL is provided in the path. Defaults to '/'.\n        sign_in_force_redirect_url: URL to redirect to after sign-up. Takes priority over deprecated props.\n        sign_in_fallback_redirect_url: Fallback URL to redirect to after sign-up if no redirect URL is provided in the path. Defaults to '/'.\n        initial_values: Prefilled values for the sign-up fields. Defaults to None.\n\n    Returns:\n        A SignUp component instance that can be rendered.\n    \"\"\"\n    return SignUp.create(\n        *children,\n        appearance=appearance,\n        routing=routing,\n        path=path,\n        sign_in_url=sign_in_url,\n        force_redirect_url=force_redirect_url,\n        fallback_redirect_url=fallback_redirect_url,\n        sign_in_force_redirect_url=sign_in_force_redirect_url,\n        sign_in_fallback_redirect_url=sign_in_fallback_redirect_url,\n        initial_values=initial_values\n    )\n</code></pre>"},{"location":"ui_components/#userprofile","title":"&lt;UserProfile /&gt;","text":"<pre><code>import reflex_clerk as clerk\n\nclerk.user_profile()\n</code></pre>"},{"location":"ui_components/#reflex_clerk.user_profile","title":"reflex_clerk.user_profile","text":"<pre><code>user_profile(\n    *children, appearance=None, additional_oauth_scopes=None\n)\n</code></pre> <p>The  component displays the user profile interface with various configuration options. <p>Examples:</p> <pre><code>import reflex_clerk as clerk\n\ndef page():\n    clerk.clerk_provider(\n        rx.box(\n            clerk.user_profile()\n        ),\n        publishable_key=\"pk_my_publishable_key\"\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Component</code> <p>Zero or more child components that will be rendered inside the user profile component.</p> <code>()</code> <code>appearance</code> <code>Appearance</code> <p>Optional object to style the component. Will only affect Clerk Components and not Account Portal pages.</p> <code>None</code> <code>additional_oauth_scopes</code> <code>dict</code> <p>Specify additional scopes per OAuth provider that your users would like to provide if not already approved. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>UserProfile</code> <p>A UserProfile component instance that can be rendered.</p> Source code in <code>custom_components/reflex_clerk/lib/user.py</code> <pre><code>def user_profile(\n        *children: rx.Component,\n        appearance: Appearance = None,\n        additional_oauth_scopes: dict = None\n) -&gt; UserProfile:\n    \"\"\"\n    The &lt;UserProfile&gt; component displays the user profile interface with various configuration options.\n\n    Examples:\n        ```python\n        import reflex_clerk as clerk\n\n        def page():\n            clerk.clerk_provider(\n                rx.box(\n                    clerk.user_profile()\n                ),\n                publishable_key=\"pk_my_publishable_key\"\n            )\n        ```\n\n    Args:\n        *children: Zero or more child components that will be rendered inside the user profile component.\n        appearance: Optional object to style the component. Will only affect Clerk Components and not Account Portal pages.\n        additional_oauth_scopes: Specify additional scopes per OAuth provider that your users would like to provide if not already approved. Defaults to None.\n\n    Returns:\n        A UserProfile component instance that can be rendered.\n    \"\"\"\n    return UserProfile.create(\n        *children,\n        appearance=appearance,\n        additional_oauth_scopes=additional_oauth_scopes\n    )\n</code></pre>"}]}